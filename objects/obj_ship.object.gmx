<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//name = "";
//password = "";
shell_type = SMALL;
shell_mass = 1;
shell_hp = 0;
shell_signature = 0;
shell_hold = 0;
shell_lifesupporting = 0;
shell_streamlining = 10;//ADD
engine_type = SMALL;
engine_fuel = TYPE_FUEL_1;
engine_trace = 20;
engine_thrust = 0;
engine_fuelconsumpton = 0;
engine_speedparticles = 0;
engine_maneuverability = 0;
engine_reliability = 0;
passivearmor_hp = 0;
passivearmor_mass = 0;
activearmor = 0;
weapon_range = 0;
weapon_damage = 0;
weapon_rate = 0;
weapon_accuracy = 0;
power_capacity = 0;
radar_distance = 0;
radar_closedistance = 0;
optics_distance = 0;


mass = 10;
topical_data = 0;

rotate_start = 0;
rotate_goal = 0;
rotate_power = 3;

fly_start = 0;
fly_power = 5;
fly_percent = 0;
fly_time = 0;
fly_count = 0;

gravitation_radius = 1000;
gravitation_max_radius = 5000;
gravitation_force = 1;

friction_k = 0.001;

view_range = 300;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_angle[1] = -image_angle + 90;
friction = sqr(speed) * friction_k * shell_streamlining;
var d_c = point_distance(x, y, obj_great_ship.x, obj_great_ship.y);
if (d_c &gt; gravitation_radius) &amp;&amp; (!place_meeting(x, y, obj_map))
{
    motion_add(point_direction(x, y, obj_great_ship.x, obj_great_ship.y), 
    gravitation_force * (d_c - gravitation_radius) / (gravitation_max_radius - gravitation_radius));
}
//view_wport[0] = 512;
//view_hport[0] = 384;

//view_xport[0] = 20;
//view_yport[0] = 20;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = shell_mass + passivearmor_mass;
rotate_power = engine_maneuverability;
if (fly_percent &gt;= 0)
{
    fly_power = engine_thrust;// * (engine_speedparticles - speed * cos(degtorad(angle_difference(direction, image_angle)))) / engine_speedparticles;
}
else
{
    fly_power = engine_thrust;// * (engine_speedparticles + speed * cos(degtorad(angle_difference(direction, image_angle)))) / engine_speedparticles;
}
if (view_range != radar_distance)
{
    view_range = radar_distance;
    view_hview[1] = view_range;
    view_wview[1] = view_range;
    view_hborder[1] = view_range / 2;
    view_vborder[1] = view_range / 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (rotate_start)
{
    if (rotate_goal &gt; 0)
    {
        image_angle -= min (rotate_goal, rotate_power / mass);
        rotate_goal -= min (rotate_goal, rotate_power / mass);
    }
    if (rotate_goal &lt; 0)
    {
        image_angle += min (-rotate_goal, rotate_power / mass);
        rotate_goal += min (-rotate_goal, rotate_power / mass);
    }
    if (rotate_goal == 0)
    {
        rotate_start = 0;
    }
}

if (fly_start)
{
    /*if (fly_count &lt; fly_time)
    {
        fly_count ++;*/
        motion_add(image_angle, fly_power * fly_percent / mass / 100);
    /*}
    else
    {
        fly_count = 0;
        fly_start = 0;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
